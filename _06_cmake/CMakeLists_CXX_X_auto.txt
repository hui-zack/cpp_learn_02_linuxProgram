# -------------------------------------------------------------------
cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 14)
project(myProject VERSION 1.0 LANGUAGES CXX C)            # 设置项目名称, 并指定项目住版本号1, 副版本好0, 执行语言c++

OPTION(ME_USE_C  "c?" OFF)

# 打印项目路径
message("|| project dir = " ${CMAKE_SOURCE_DIR})
message("|| build dir = " ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)  # 设置静态库文件输出目录(代码中所有生成的静态库都会到这里)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)  # 设置动态库文件输出目录(代码中所有生成的动态库都会到这里)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)  # 设置可执行文件输出目录(代码中所有生成的可执行文件都会到这里)
set(ME_CONFIG_DIR ${CMAKE_SOURCE_DIR}/config)
set(ME_SRC_DIR ${CMAKE_SOURCE_DIR}/src)

if(EXISTS "${ME_CONFIG_DIR}/config.h.in")
  configure_file(${ME_CONFIG_DIR}/config.h.in config.h)                    # 将配置文件config.h.in的内容加载到cmake
endif()

# set(ME_TARGET  useMakefileMain mainDemo)
# -------------------------------------------------------------------
# debug开关
option(DEBUG_TYPE "set debug" ON)               # 修改该值, 需要使用cmake重新编译项目
if(DEBUG_TYPE) 
    message("|| debug type = true") 
    set(CMAKE_BUILD_TYPE "Debug") 
endif()

# -------------------------------------------------------------------

MACRO(FUNC_GETDIRS result dirPath fileEnd )                        # 函数 递归获取所有子目录, 返回所有以fileEnd结尾的文件的父目录列表
  file(GLOB_RECURSE children  ${dirPath} ${dirPath}/*${fileEnd})
  SET(dirlist "") 
  list(SORT children)
  FOREACH(child ${children})
    string(REGEX REPLACE "(.*)/.*" "\\1" dirSrc ${child})
    IF(IS_DIRECTORY ${dirSrc} AND NOT "${dirSrc}" STREQUAL "${TMP}")
        LIST(APPEND dirlist ${dirSrc})
        SET(TMP  ${dirSrc})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

# 函数 递归获取所有子目录, 返回所有以fileEnd结尾的文件列表
MACRO(FUNC_GETFILES result dirPath fileEnd)
  file(GLOB_RECURSE children  ${dirPath} ${dirPath}/*${fileEnd})
  LIST(APPEND dirlist ${filesrc})
  FOREACH(child ${children})
    LIST(APPEND dirlist ${child})
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()


# 判断系统类型
IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	OPTION(ME_IS_LINUX "the host is linux?" ON)
  OPTION(ME_IS_WINDOWS "the host is linux?" OFF)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
  OPTION(ME_IS_LINUX "the host is linux?" OFF)
  OPTION(ME_IS_WINDOWS "the host is linux?" ON)
ELSE ()
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")


# -------------------------------------------------------------------

# 编译自己的库
FUNC_GETDIRS(SON_CMAKES ${ME_SRC_DIR} "CMakeLists.txt")               # 获取src下含有CMakeLists的所有子目录

FOREACH(item ${SON_CMAKES})                     # 循环添加库路径, 每次循环都会进入添加的库目录, 根据该目录里的子CMakeLists编译出库来
  add_subdirectory(${item})
ENDFOREACH()




# -------------------------------------------------------------------
############################ 循环编译可执行目标 ##########################
# FUNC_GETFILES(mains "${ME_SRC_DIR}" "${ME_SRC_DIR}/main*.cpp ${ME_SRC_DIR}/main*.c")
if(${ME_USE_C})
  file(GLOB_RECURSE mains RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*main*.c")
else()
  file(GLOB_RECURSE mains RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*main*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/*main*.c")
endif()


foreach(mainfile IN LISTS mains)
    # Get file name without directory
    get_filename_component(ME_TARGET ${mainfile} NAME_WE)
    add_executable(${ME_TARGET} ${mainfile})
message("1111111111111")
# add_executable(${ME_TARGET} src/helloCmake.cpp)     # 设置名称为mainDemo(目标)

FILE(GLOB_RECURSE SRC_HEADERS "*.h")
FILE(GLOB_RECURSE SRC_CPPS "*.cpp")
FILE(GLOB_RECURSE SRC_CS "*.C")

################### 为mainDemo目标设置头文件搜索目录 ###################

# 调用函数获取目录信息信息
FUNC_GETDIRS(SRC_DIRS ${ME_SRC_DIR} "*")                              # 获取src目录的所有子目录, 
FUNC_GETDIRS(STATIC_OUT_DIRS ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} "*")   # 获取静态库输出目录的所有子目录
FUNC_GETDIRS(SHARED_OUT_DIRS ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} "*")   # 获取动态库输出目录的所有子目录
target_include_directories(${ME_TARGET}         # 为mainDemo目标设置头文件目录
    PUBLIC                                  # 这些目录下的头文件既能供自己使用, 也可用作外部接口
        ${PROJECT_BINARY_DIR}               # cmake编译目录
        ${STATIC_OUT_DIRS}                  # 静态库输出目录下所有目录
        ${SHARED_OUT_DIRS}                  # 动态库输出目录下所有目录
        ${SRC_DIRS}                         # src下所有目录
    PRIVATE                                 # 这些目录下的头文件只能供自己使用
    INTERFACE                               # 这些目录下的头文件只能用作外部接口
) 


############################## 自动链接库文件 ##########################
IF(${ME_IS_LINUX})
  FUNC_GETFILES(staticLibs ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} ".a")        # 获取静态库输出目录所有的.a文件路径
  FUNC_GETFILES(sharedLibs ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ".so")       # 获取静态库输出目录所有的.so文件路径
ENDIF()

IF(${ME_IS_windows})
  FUNC_GETFILES(staticLibs ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} ".lib")
  FUNC_GETFILES(sharedLibs ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ".dll")
ENDIF()

#为mainDemo链接需要用的静态库和动态库(只写库名即可多个库用空格隔开)
target_link_libraries(${ME_TARGET} 
    PUBLIC                
        ${staticLibs}         # 使用的静态库具体到文件名称
        ${sharedLibs}         # 项目中使用的动态库具体到文件名称
)

endforeach()

